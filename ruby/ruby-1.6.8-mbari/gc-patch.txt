These files are a patch to help debug Ruby programs that *think* they have
cleared all references to a certain object, yet GC is unwilling to delete it.

The .c files are based on ruby 1.6.7 and 1.7.2 downloaded from CVS as of
22Jun02. All changes are bracketed by
  
  #ifdef DEBUG_REACHABILITY

The Makefile is a standard ruby Makefile, except that it defines one
preprocessor symbol:

  CFLAGS = -g -O2 -DDEBUG_REACHABILITY

or just:  brent 4/3/07

  make clean
  make "CFLAGS=-O2 -DDEBUG_REACHABILITY" ruby
  
You will need to modify your makefile accordingly, and run make.

To use:

The effect of these files is to define a new module method,

  GC.reachability_paths obj
  
which returns an array of arrays. Each array in this list is a path starting
from some basic reference in the interpreter, and ending with an object that
contains a reference to obj.

Normally, the first entry is simply an object referred to by some pointer in
the interpreter. However, in three special cases, more information is given:

1. In the case of paths starting on the frame stack, the first entry is of the
   form 

  "frame <number>: <filename> line <number>"

2. In the case of Ruby global variables, the first entry is of the form

  "Ruby global <varname>"

3. In the case of C global variables (i.e., registered pointers), the first
   entry is of the form

  "C global <varname>"

(It would be more useful to say somthing about the source of the reference in
the other cases, too, but the frame and global cases are probably the most
useful.)

In addition, when the method runs, it prints some information about what it is
checking. This can give you a hint where the reference is coming from, though
it isn't very specific.

Problems:

* References on the stack (which is different from frames) sometimes are no
  longer valid after the method finishes, so some entries in the result
  array may not be accessible. You can still access the others individually.

* I don't see a way to separate this patch from the Ruby GC. The problem is
  that rb_gc_mark is hardcoded everywhere, so the only way to hook into it is
  to modify it :(

* The changes to rb_gc_mark add a few extra instructions per call, so there is
  a small performance penalty to using this patch. It's really just for
  debugging.
  
Suggestions welcome...

Joel VanderWerf
vjoel@users.sourceforge.net
